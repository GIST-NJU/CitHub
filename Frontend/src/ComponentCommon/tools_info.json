{
  "RECORDS": [
    {
      "id": "1",
      "title": "OTAT",
      "type": "Generation",
      "tags": "Generation, Greedy",
      "user_id": "10",
      "url": "http://210.28.135.32:8103",
      "healthcheck_url": "/",
      "img": "http://210.28.135.32:80/serviceImg/OTAT.png",
      "repository": "https://github.com/lejinWang/greedygenerator",
      "license": "MIT",
      "description": "OTAT is an implementation of the well-known One-Test-At-a-Time (OTAT) covering array generation framework. It starts from an empty test suite, and at each time, a test case that covers the most yet uncovered combinations will be generated, until all constraint satisfying combinations are covered. OTAT encodes constraints into boolean formulas, and a SAT solver is used to determine the validity of each value assignment during the generation process. More details can be found in the research paper [1].\r\n\r\nReference\r\n[1] Cohen M B, Dwyer M B, Shi J. Constructing interaction test suites for highly-configurable systems in the presence of constraints: A greedy approach. IEEE Transactions on Software Engineering, 2008, 34(5): 633-650.",
      "short_desc": "OTAT is an implementation of the well-known one-test-at-a-time covering array generation framework. It aims to construct a test case that covers the most yet uncovered combinations at each time.",
      "date": "16/5/2019 16:00:00",
      "docker_image": "",
      "version": "1.0",
      "original_version_id": "0",
      "input_format": "strength;int;the covering strength;2\r\nparameter;int;the number of parameters;3\r\nvalues;int[];the number of choices of each parameter;[2,6,3]\r\nconstraints;string[];constraints of model;[[\"0/0\",\"1/0\"],[\"0/0\",\"1/1\"],[\"0/0\",\"1/2\"],[\"0/0\",\"1/3\"]]",
      "output_format": "testsuite;int[][];the generated covering array; [[0,0, 0]]\r\nsize;int;size of test suite;8\r\ntime;string;computational cost (ms);12",
      "docker_url": "",
      "checkflag": "1",
      "paper": "0"
    },
    {
      "id": "35",
      "title": "SA",
      "type": "Generation",
      "tags": "Generation, Search-Based",
      "user_id": "10",
      "url": "http://210.28.135.32:8104",
      "healthcheck_url": "/",
      "img": "http://210.28.135.32:80/serviceImg/SA.png",
      "repository": "https://github.com/lejinWang/SA",
      "license": "MIT",
      "description": "SA stands for simulated annealing, which is a well-known search based algorithm for solving optimisation problems. This service applies SA to evolve a randomly initialised test suite, guided by the fitness function that calculates the number of uncovered combinations, until a t-way constrained covering array is found. A SAT solver is used to handle constraints (determine the validity of every modification)  during the generation process. More details can be found in the research paper [1].\r\n\r\nReference\r\n[1] Brady J. Garvin, Myra B. Cohen, Matthew B. Dwyer, Evaluating improvements to a meta-heuristic search for constrained interaction testing, Empirical Software Engineering (EMSE), 2010, 16(1): 61-102.\r\n\r\n",
      "short_desc": "SA realises the evolving-test-suite framework with the search-based simulated annealing algorithm. It usually produces smaller covering arrays than the greedy algorithms.",
      "date": "24/5/2019 16:00:00",
      "docker_image": "",
      "version": "1.0",
      "original_version_id": "0",
      "input_format": "strength;int;the covering strength;2\r\nparameter;int;the number of parameters;3\r\nvalues;int[];the number of choices of each parameter;[2,6,3]\r\nconstraints;string[];constraints of model;[[\"0/0\",\"1/0\"],[\"0/0\",\"1/1\"],[\"0/0\",\"1/2\"],[\"0/0\",\"1/3\"]]",
      "output_format": "testsuite;int[][];the generated covering array; [[0,0, 0]]\r\nsize;int;size of test suite;8\r\ntime;string;computational cost (ms);12",
      "docker_url": "",
      "checkflag": "1",
      "paper": "0"
    },
    {
      "id": "36",
      "title": "IPO",
      "type": "Generation",
      "tags": "Generation, Greedy",
      "user_id": "7",
      "url": "http://210.28.135.32:8105",
      "healthcheck_url": "/",
      "img": "http://210.28.135.32:80/serviceImg/IPO.png",
      "repository": "https://github.com/lejinWang/IPO",
      "license": "MIT",
      "description": "IPO is an implementation of the In-Parameter-Order (IPO) covering array generation algorithm. Its core idea is to first construct a t-way covering array for the t parameters that have the largest number of values. The algorithm will then apply horizontal and vertical extensions to expand the current covering array to include one new parameter at each time. More details can be found in the research paper [1].\r\n\r\nReference\r\n[1] Linbin Yu, Yu Lei, Mehra N. Borazjany, Raghu N. Kacker, D. Richard Kuhn, An Efficient Algorithm for Constraint Handling in Combinatorial Test Generation, International Conference on Software Testing, Verification and Validation (ICST), 2013: 242-251.",
      "short_desc": "IPO is an implementation of the in-parameter-order covering array generation algorithm, which was initially proposed by Lei and Tai.",
      "date": "24/5/2020 16:00:00",
      "docker_image": "",
      "version": "1.0",
      "original_version_id": "0",
      "input_format": "strength;int;the covering strength;2\r\nparameter;int;the number of parameters;3\r\nvalues;int[];the number of choices of each parameter;[2,6,3]\r\nconstraints;string[];constraints of model;[[\"0/0\",\"1/0\"],[\"0/0\",\"1/1\"],[\"0/0\",\"1/2\"],[\"0/0\",\"1/3\"]]",
      "output_format": "testsuite;int[][];the generated covering array; [[0,0, 0]]\r\nsize;int;size of test suite;8\r\ntime;string;computational cost (ms);12",
      "docker_url": "",
      "checkflag": "1",
      "paper": "0"
    },
    {
      "id": "37",
      "title": "ACTS Format Reader",
      "type": "FormatConversion",
      "tags": "Connector, Input, ACTS",
      "user_id": "13",
      "url": "http://210.28.135.32:8106",
      "healthcheck_url": "/",
      "img": "http://210.28.135.32:80/serviceImg/input.png",
      "repository": "https://github.com/lejinWang/ifc_acts",
      "license": "MIT",
      "description": "ACTS is a well-known combinatorial testing tool that has been used in many projects and organisations. ACTS Format Reader facilitates the users of this popular tool, as it transfers the test models (model files) of ACTS into the standard input format of CitHub platform. With the help of this service, testers can easily use other services in CitHub with their existing ACTS test models.",
      "short_desc": "ACTS Format Reader transfers the test models (model files) of the well-known ACTS tool into the standard input format of CitHub platform.",
      "date": "24/5/2018 16:00:00",
      "docker_image": "",
      "version": "1.0",
      "original_version_id": "0",
      "input_format": "file;string;the test model of ACTS;[System]&#Name: Phone&#[Parameter]&#emailViewer(boolean): TRUE, FALSE&#textLines(int): 25,26,27,28,29,30&#display(enum): 16MC, 8MC, BW&#[Constraint]&#emailViewer => textLines > 28&#\r\nstrength;int;covering strength;2",
      "output_format": "strength;int;covering strength;2\r\nparameter;int;number of parameters;3\r\nvalues;int[];number of choices of each parameter;[2,6,3]\r\nconstraints;string[][];a list of forbidden tuples;[[\"0/1\"],[\"1/0\"]]",
      "docker_url": "",
      "checkflag": "1",
      "paper": "0"
    },
    {
      "id": "39",
      "title": "CASA Format Reader",
      "type": "FormatConversion",
      "tags": "Connector, Input, CASA",
      "user_id": "8",
      "url": "http://210.28.135.32:8107",
      "healthcheck_url": "/",
      "img": "http://210.28.135.32:80/serviceImg/input.png",
      "repository": "https://github.com/lejinWang/ifc_casa",
      "license": "MIT",
      "description": "CASA is a popular search-based constrained covering array generation tool. It is widely used in many researches of combinatorial testing. CASA Format Reader aims to transfer the test models (model files) of CASA into the standard input format of CitHub platform. With the help of this service, testers can easily use other services in CitHub with their existing CASA test models.",
      "short_desc": "CASA Format Reader transfers the test models (model files) of the well-known CASA tool into the standard input format of CitHub platform.",
      "date": "27/5/2019 16:00:00",
      "docker_image": "",
      "version": "1.0",
      "original_version_id": "0",
      "input_format": "model_file;string;test model file of CASA;2&#3&#2 6 3\r\nconstraints_file;string;constraint file of CASA;4&#2&#- 0 - 2&#2&#- 0 - 3&#2&#- 0 - 4&#2&#- 0 - 5\r\n",
      "output_format": "strength;int;covering strength;2\r\nparameter;int;number of parameters;3\r\nvalues;int[];number of choices of each parameter;[2,6,3]\r\nconstraints;string[][];a list of forbidden tuples;[[\"0/1\"],[\"1/0\"]]",
      "docker_url": "",
      "checkflag": "1",
      "paper": "0"
    },
    {
      "id": "40",
      "title": "NL Test Plan",
      "type": "FormatConversion",
      "tags": "Connector, Output, Natural Language",
      "user_id": "7",
      "url": "http://210.28.135.32:8108",
      "healthcheck_url": "/",
      "img": "http://210.28.135.32:80/serviceImg/output.png",
      "repository": "https://github.com/lejinWang/ofc_nl",
      "license": "MIT",
      "description": "Abstract representations of test cases, such as [0, 1, 0, 2], are hard to use in practice. NL Test Plan thus provides service to transfer abstract covering arrays into natural language described test plans. The output is readable to testers, and offers detailed guidelines for the execution of each of the generated test cases.",
      "short_desc": "NL Test Plan provides service to transfer abstract covering arrays into readable test plans of natural languages.",
      "date": "27/5/2019 16:00:00",
      "docker_image": "",
      "version": "1.0",
      "original_version_id": "0",
      "input_format": "testsuite;int[][];test suite;[[0,0,0],[0,1,1],[1,0,1],[1,1,0]]\r\nactual_value;string[][];actual values of each parameter;[[\"window\",\"mac\"],[\"ie1.0\",\"ie2.0\",\"ie3.0\",\"chrome1.0\",\"chrome2.0\",\"chrome3.0\"],[\"www.baidu.com\",\"www.google.com\",\"www.wiki.com\"]]\r\noutputModel;string;template of test plans;first,we should do &#,then open &#,finally,enter in the browser address bar with &#",
      "output_format": "testsuiteOfConversion;string[];test plans;[]",
      "docker_url": "",
      "checkflag": "1",
      "paper": "0"
    },
    {
      "id": "41",
      "title": "JUnit Test Plan",
      "type": "FormatConversion",
      "tags": "Connector, Output, JUnit",
      "user_id": "11",
      "url": "http://210.28.135.32:8109",
      "healthcheck_url": "/",
      "img": "http://210.28.135.32:80/serviceImg/output.png",
      "repository": "https://github.com/lejinWang/ofc_junit",
      "license": "MIT",
      "description": "Abstract representations of test cases, such as [0, 1, 0, 2], are hard to use in practice. JUnit Test Plan thus provides service to transfer abstract covering arrays into executable code scripts. The testers should first provide a template Java code. Then this service will produce a set of JUnit methods (@Test), each of which is exactly a concrete realisation of a test case of the given test suite.",
      "short_desc": "JUnit Test Plan provides service to transfer abstract covering arrays into executable code scripts of JUnit framework.",
      "date": "25/5/2020 16:00:00",
      "docker_image": "",
      "version": "1.0",
      "original_version_id": "0",
      "input_format": "testsuite;int[][];test suite;[[0,0,0],[0,1,1],[1,0,1],[1,1,0]]\r\nactual_value;string[][];actual values of each parameter;[[\"1\",\"2\"],[\"true\",\"false\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"2\"]]\r\nfunctionHead;string;template of function declaration;public void test()\r\nfunctionBody;string;template of function body;CIT cit= new CIT(&p2) cit.execuse(&p3) cit.process(&p1)",
      "output_format": "testsuiteOfJunit;string[];code scripts;[]",
      "docker_url": "",
      "checkflag": "1",
      "paper": "0"
    },
    {
      "id": "46",
      "title": "ACTS",
      "type": "Generation",
      "tags": "Generation,ACTS",
      "user_id": "12",
      "url": "http://210.28.135.32:8110",
      "healthcheck_url": "",
      "img": "http://210.28.135.32:80/serviceImg/12/13/c8020d7d-cceb-4f39-96d2-7fd9f5b1867facts.png",
      "repository": "https://github.com/lejinWang/real_acts3.git",
      "license": "MIT",
      "description": "ACTS is a well-known combinatorial test suite generation tool. This tools was initially developed by NIST, and has been used in many real-world projects and organisations.\n",
      "short_desc": "ACTS is a well-known combinatorial test suite generation tool. This tools was initially developed by NIST, and has been used in many real-world projects and organisations.\n",
      "date": "26/8/2019 07:48:54",
      "docker_image": "",
      "version": "1.0",
      "original_version_id": "0",
      "input_format": "strength;int;the covering strength;2\nparameter;int;the number of parameters;3\nvalues;int[];the number of choices of each parameter;[2,6,3]\nconstraints;string[];constraints of model;[[\"0/0\",\"1/0\"],[\"0/0\",\"1/1\"],[\"0/0\",\"1/2\"],[\"0/0\",\"1/3\"]]",
      "output_format": "testsuite;int[][];the generated covering array; [[0,0, 0]]\nsize;int;size of test suite;8\ntime;string;computational cost (ms);12",
      "docker_url": "",
      "checkflag": "1",
      "paper": "0"
    },
    {
      "id": "47",
      "title": "Coverage Checker",
      "type": "Evaluation",
      "tags": "Evaluation,Testsuite",
      "user_id": "7",
      "url": "http://210.28.135.32:8111",
      "healthcheck_url": "",
      "img": "http://210.28.135.32:80/serviceImg/1/11/9fa74502-0113-4eae-adeb-0252d8f239b2evaOne.png",
      "repository": "https://github.com/lejinWang/evaOne.git",
      "license": "MIT",
      "description": "Coverage Checker is a service that evaluates combination coverage of a given test suite. It also provides support for estimating the coverage of a covering array generation algorithm.\n",
      "short_desc": "Coverage Checker is a service that evaluates combination coverage of a given test suite. It also provides support for estimating the coverage of a covering array generation algorithm.\n",
      "date": "26/8/2019 10:53:01",
      "docker_image": "",
      "version": "1.0",
      "original_version_id": "0",
      "input_format": "strength;int;the covering strength;2\nparameter;int;the number of parameters;3\nvalues;int[];the number of choices of each parameter;[2,6,3]\ntestsuite;int[][];the generated covering array; [[0,0,0],[0,1,0],[1,0,0],[1,1,0]]",
      "output_format": "coverArray;int[];the array of covered;[3,6,36]\ntime;string;computational cost (ms);12",
      "docker_url": "",
      "checkflag": "1",
      "paper": "0"
    },
    {
      "id": "48",
      "title": "SortArray",
      "type": "Prioritisation",
      "tags": "Prioritisation,Sort,Testsuite",
      "user_id": "7",
      "url": "http://210.28.135.32:8112",
      "healthcheck_url": "",
      "img": "http://210.28.135.32:80/serviceImg/3/2/5094212f-c3ea-4a87-a400-fb74123248cbsortOne.png",
      "repository": "https://github.com/lejinWang/sortOne.git",
      "license": "MIT",
      "description": "SortArray is a service that seeks to identify the optimal testing order of a given test suite with the goal to maximise its rate of covering combinations.\n",
      "short_desc": "SortArray is a service that seeks to identify the optimal testing order of a given test suite with the goal to maximise its rate of covering combinations.\n",
      "date": "26/8/2019 11:12:31",
      "docker_image": "",
      "version": "1.0",
      "original_version_id": "0",
      "input_format": "parameter;int;the number of parameters;3\nweight;int[];the parameters of the weight;[3,1,2]\ntestsuite;int[][];the generated covering array; [[0,0,0],[0,1,0],[1,0,0],[1,1,0]]",
      "output_format": "testsuite;int[][];the generated covering array; [[0,0, 0]]\ntime;string;computational cost (ms);12",
      "docker_url": "",
      "checkflag": "1",
      "paper": "0"
    },
    {
      "id": "49",
      "title": "MiniArray",
      "type": "SelectionReduction",
      "tags": "Reduction,Testsuite",
      "user_id": "7",
      "url": "http://210.28.135.32:8113",
      "healthcheck_url": "",
      "img": "http://210.28.135.32:80/serviceImg/12/6/53f2d29e-6982-46d1-a6ed-5d42058dffbfreductOne.png",
      "repository": "https://github.com/lejinWang/reductOne.git",
      "license": "MIT",
      "description": "MiniArray is a service that seeks to minimise the size of a given covering array while maintaining its combinatoion coverage at the same time.\n",
      "short_desc": "MiniArray is a service that seeks to minimise the size of a given covering array while maintaining its combinatoion coverage at the same time.\n",
      "date": "26/8/2019 11:46:27",
      "docker_image": "",
      "version": "1.0",
      "original_version_id": "0",
      "input_format": "strength;int;the covering strength;2\nparameter;int;the number of parameters;3\nvalues;int[];the number of choices of each parameter;[2,6,3]\ntestsuite;int[][];the generated covering array; [[0,0,0],[0,1,0],[1,0,0],[1,1,0]]",
      "output_format": "testsuite;int[][];the generated covering array; [[0,0,0],[0,1,0],[1,0,0],[1,1,0]]\nsize;int;size of test suite;8\ntime;string;computational cost (ms);12",
      "docker_url": "",
      "checkflag": "1",
      "paper": "0"
    },
    {
      "id": "50",
      "title": "CTWedge Format Reader",
      "type": "FormatConversion",
      "tags": "Connector, Input, CTWedge,CitLab",
      "user_id": "11",
      "url": "http://210.28.135.32:8114",
      "healthcheck_url": "",
      "img": "http://210.28.135.32:80/serviceImg/5/0/8818850b-209d-4654-af0d-6ef56266fb34input.png",
      "repository": "https://github.com/lejinWang/ifc_ctwedge.git",
      "license": "MIT",
      "description": "ifc_ctwedge full name is CTWedge Input Format Convertor.It converts the CTWedge input format into a unified format for the platform(cithub), making it easy to use a combination of services",
      "short_desc": "CTWedge Format Reader transfers the test models (model files) of the well-known CTWedge tool into the standard input format of CitHub platform.\n",
      "date": "29/8/2018 00:55:08",
      "docker_image": "wanglejin/ifc_ctwedge:v1.0",
      "version": "1.0",
      "original_version_id": "0",
      "input_format": "model_file;string;the test model of CTWedage;Model Phone&#Parameters:&#Boolean emailViewer;&#Range textLines [25 .. 30];&#Enumerative display {16MC, 8MC, BW};&#end&#Constraints:&# # emailViewer==true => textLines > 28# &#end\nstrength;int;covering strength;2",
      "output_format": "strength;int;covering strength;2\nparameter;int;number of parameters;3\nvalues;int[];number of choices of each parameter;[2,6,3]\nconstraints;string[][];a list of forbidden tuples;[[\"0/1\"],[\"1/0\"]]\nseed;int[][];the list of seed array;[[0,0,0],[1,0,1]]",
      "docker_url": "",
      "checkflag": "1",
      "paper": "0"
    },
    {
      "id": "51",
      "title": "PICT Format Reader",
      "type": "FormatConversion",
      "tags": "Connector, Input, PICT",
      "user_id": "1",
      "url": "http://210.28.135.32:8115",
      "healthcheck_url": "",
      "img": "http://210.28.135.32:80/serviceImg/5/0/22518d39-837b-4952-a56e-b8933999dbefinput.png",
      "repository": "https://github.com/lejinWang/ifc_pict.git",
      "license": "MIT",
      "description": "PICT Format Reader transfers the test models (model files) of the well-known PICT tool into the standard input format of CitHub platform.It converts the PICT input format into a unified format for the platform(cithub), making it easy to use a combination of services.",
      "short_desc": "PICT Format Reader transfers the test models (model files) of the well-known PICT tool into the standard input format of CitHub platform.\n",
      "date": "29/8/2019 02:36:44",
      "docker_image": "wanglejin/ifc_pict:v1.0",
      "version": "1.0",
      "original_version_id": "0",
      "input_format": "model_file;string;the test model of Pict;emailViewer: TRUE, FALSE&#textLines: 25, 26, 27, 28, 29, 30&#display: 16MC, 8MC, BW&#IF [emailViewer] = \\\"TRUE\\\" THEN [textLines] > 29; \nstrength;int;covering strength;2",
      "output_format": "strength;int;covering strength;2\nparameter;int;number of parameters;3\nvalues;int[];number of choices of each parameter;[2,6,3]\nconstraints;string[][];a list of forbidden tuples;[[\"0/1\"],[\"1/0\"]]\nrelation;int[];a array of relation;[0,0,0]",
      "docker_url": "",
      "checkflag": "1",
      "paper": "0"
    },
    {
      "id": "52",
      "title": "PICT",
      "type": "Generation",
      "tags": "Generation,Greedy",
      "user_id": "7",
      "url": "http://210.28.135.32:8116",
      "healthcheck_url": "",
      "img": "http://210.28.135.32:80/serviceImg/5/6/9c76bcee-da4f-4afc-8e5d-097cd09df82bPICT.png",
      "repository": "https://github.com/lejinWang/real_pict.git",
      "license": "MIT",
      "description": "A test case generation tool that  has been in use at Microsoft since 2000, which implements the t-wise testing strategy and features making the strategy feasible in practice of software testing.",
      "short_desc": "PICT is a tool built on top of a flexible combinatorial test case generation engine, which was initally implemented by Microsoft.\n",
      "date": "23/5/2020 02:30:36",
      "docker_image": "",
      "version": "1.0",
      "original_version_id": "0",
      "input_format": "strength;int;the covering strength;2\nparameter;int;the number of parameters;3\nvalues;int[];the number of choices of each parameter;[2,6,3]\nconstraints;string[];constraints of model;[[\"0/0\",\"1/0\"],[\"0/0\",\"1/1\"],[\"0/0\",\"1/2\"],[\"0/0\",\"1/3\"]]",
      "output_format": "testsuite;int[][];the generated covering array; [[0,0, 0]]\nsize;int;size of test suite;8\ntime;string;computational cost (ms);12",
      "docker_url": "",
      "checkflag": "1",
      "paper": "0"
    },
    {
      "id": "53",
      "title": "CASA",
      "type": "Generation",
      "tags": "Generation,CASA",
      "user_id": "8",
      "url": "http://210.28.135.32:8118",
      "healthcheck_url": "",
      "img": "http://210.28.135.32:80/serviceImg/7/6/4da4b8aa-65bd-49f4-8110-848c111e864cCASA.png",
      "repository": "https://github.com/lejinWang/real_casa.git",
      "license": "MIT",
      "description": "This is the main page for CASA, the tool in An Improved Meta-Heuristic Search for Constrained Interaction Testing, which appeared in SSBSE 2009, and Evaluating Improvements to a Meta-Heuristic Search for Constrained Interaction Testing, which appeared in EMSE. When citing this material, please reference the appropriate paper rather than this page.",
      "short_desc": "CASA is a well-known combinatorial test suite generation tool empowered by heuristic search based techniques. The initial version of this tool appeared in SSBSE 2009 and EMSE 2010 (Evaluating Improvements to a Meta-Heuristic Search for Constrained Interaction Testing).\n",
      "date": "23/9/2019 02:39:44",
      "docker_image": "wanglejin/real_casa:v1.0",
      "version": "1.0",
      "original_version_id": "0",
      "input_format": "strength;int;the covering strength;2\nparameter;int;the number of parameters;3\nvalues;int[];the number of choices of each parameter;[2,6,3]\nconstraints;string[];constraints of model;[[\"0/0\",\"1/0\"],[\"0/0\",\"1/1\"],[\"0/0\",\"1/2\"],[\"0/0\",\"1/3\"]]",
      "output_format": "testsuite;int[][];the generated covering array; [[0,0, 0]]\nsize;int;size of test suite;8\ntime;string;computational cost (ms);12",
      "docker_url": "",
      "checkflag": "1",
      "paper": "0"
    },
    {
      "id": "54",
      "title": "FastCA",
      "type": "Generation",
      "tags": "Generation,ACTS",
      "user_id": "10",
      "url": "http://210.28.135.32:8110",
      "healthcheck_url": "",
      "img": "http://210.28.135.32:80/serviceImg/0/0/52a06bf4-1e77-4562-9dcc-45595260e44afastCA(R).png",
      "repository": "https://github.com/lejinWang/real_fastca.git",
      "license": "MIT",
      "description": "A gradient descent search step to further improve the algorithm, leading to a new algorithm.",
      "short_desc": "FastCA realises two-mode covering array generation algorithm (Tabu search + greedy), and employs a gradient descent search step to further improve the performance.\n",
      "date": "23/5/2020 03:06:43",
      "docker_image": "",
      "version": "1.0",
      "original_version_id": "0",
      "input_format": "strength;int;the covering strength;2\nparameter;int;the number of parameters;3\nvalues;int[];the number of choices of each parameter;[2,6,3]\nconstraints;string[];constraints of model;[[\"0/0\",\"1/0\"],[\"0/0\",\"1/1\"],[\"0/0\",\"1/2\"],[\"0/0\",\"1/3\"]]\nmaxTime;int;run time;100",
      "output_format": "testsuite;int[][];the generated covering array; [[0,0, 0]]\nsize;int;size of test suite;8\ntime;string;computational cost (ms);12",
      "docker_url": "",
      "checkflag": "1",
      "paper": "0"
    },
    {
      "id": "55",
      "title": "Tcases",
      "type": "Generation",
      "tags": "Generation,IPO",
      "user_id": "13",
      "url": "http://210.28.135.32:8105",
      "healthcheck_url": "",
      "img": "http://210.28.135.32:80/serviceImg/output.png",
      "repository": "https://github.com/lejinWang/real_tcases.git",
      "license": "MIT",
      "description": "Tcases is a tool for designing tests. It doesn't matter what kind of system you are testing. Nor does it matter what level of the system you are testing — unit, subsystem, or full system. You can use Tcases to design your tests in any of these situations. With Tcases, you define the input space for your system-under-test and the level of coverage that you want. Then Tcases generates a minimal set of test cases that meets your requirements.",
      "short_desc": "Tcases is a tool for designing tests. It doesn't matter what kind of system you are testing. Nor does it matter what level of the system you are testing — unit, subsystem, or full system. You can use Tcases to design your tests in any of these situations.",
      "date": "22/5/2020 03:06:43",
      "docker_image": "",
      "version": "1.0",
      "original_version_id": "0",
      "input_format": "strength;int;the covering strength;2\nparameter;int;the number of parameters;3\nvalues;int[];the number of choices of each parameter;[2,6,3]\nconstraints;string[];constraints of model;[[\"0/0\",\"1/0\"],[\"0/0\",\"1/1\"],[\"0/0\",\"1/2\"],[\"0/0\",\"1/3\"]]\nmaxTime;int;run time;100",
      "output_format": "testsuite;int[][];the generated covering array; [[0,0, 0]]\nsize;int;size of test suite;8\ntime;string;computational cost (ms);12",
      "docker_url": "",
      "checkflag": "1",
      "paper": "0"
    },
    {
      "id": "56",
      "title": "JCunit Core",
      "type": "Generation",
      "tags": "Generation,IPO",
      "user_id": "1",
      "url": "http://210.28.135.32:8105",
      "healthcheck_url": "",
      "img": "http://210.28.135.32:80/serviceImg/5/6/9c76bcee-da4f-4afc-8e5d-097cd09df82bPICT.png",
      "repository": "https://github.com/lejinWang/real_jcunit.git",
      "license": "MIT",
      "description": "A model based testing tool powered by combinatorial testing techniques.",
      "short_desc": "JCunit Core implements the core covering generation algorithm of JCUnit, which is a model based testing tool powered by combinatorial testing techniques.\n",
      "date": "24/4/2020 23:30:41",
      "docker_image": "",
      "version": "1.0",
      "original_version_id": "0",
      "input_format": "strength;int;the covering strength;2\nparameter;int;the number of parameters;3\nvalues;int[];the number of choices of each parameter;[2,6,3]\nconstraints;string[];constraints of model;[[\"0/0\",\"1/0\"],[\"0/0\",\"1/1\"],[\"0/0\",\"1/2\"],[\"0/0\",\"1/3\"]]",
      "output_format": "testsuite;int[][];the generated covering array; [[0,0, 0]]\nsize;int;size of test suite;8\ntime;string;computational cost (ms);12",
      "docker_url": "",
      "checkflag": "1",
      "paper": "0"
    },
    {
      "id": "57",
      "title": "coffee4j Core",
      "type": "Generation",
      "tags": "Generation,IPO",
      "user_id": "1",
      "url": "http://210.28.135.32:8105",
      "healthcheck_url": "",
      "img": "http://210.28.135.32:80/serviceImg/5/6/9c76bcee-da4f-4afc-8e5d-097cd09df82bPICT.png",
      "repository": "https://github.com/lejinWang/real_coffee4j.git",
      "license": "MIT",
      "description": "coffee4j is a Java-based framework for combinatorial test input generation and fault characterization. It is based on a fast implementation of the well-known IPOG algorithm and supports constraint handling, robustness testing and fault localization. A JUnit 5 extension seamlessly integrates combinatorial test input generation, fault characterization and automated test execution.",
      "short_desc": "coffee4j Core implements the core generation algorithm of a Java-based framework for combinatorial test input generation, fault characterization and automated test execution.\n",
      "date": "26/5/2020 23:30:41",
      "docker_image": "",
      "version": "1.0",
      "original_version_id": "0",
      "input_format": "strength;int;the covering strength;2\nparameter;int;the number of parameters;3\nvalues;int[];the number of choices of each parameter;[2,6,3]\nconstraints;string[];constraints of model;[[\"0/0\",\"1/0\"],[\"0/0\",\"1/1\"],[\"0/0\",\"1/2\"],[\"0/0\",\"1/3\"]]",
      "output_format": "testsuite;int[][];the generated covering array; [[0,0, 0]]\nsize;int;size of test suite;8\ntime;string;computational cost (ms);12",
      "docker_url": "",
      "checkflag": "1",
      "paper": "0"
    },
    {
      "id": "58",
      "title": "medici",
      "type": "Generation",
      "tags": "Generation,Greedy",
      "user_id": "7",
      "url": "http://210.28.135.32:8104",
      "healthcheck_url": "",
      "img": "http://210.28.135.32:80/serviceImg/5/6/9c76bcee-da4f-4afc-8e5d-097cd09df82bPICT.png",
      "repository": "https://github.com/lejinWang/real_medici.git",
      "license": "MIT",
      "description": "medici is a tool for combinatorial test generation based on the use of Multiple-Valued Decision Diagrams",
      "short_desc": "medici is a tool for combinatorial test generation based on the use of Multiple-Valued Decision Diagrams.\n",
      "date": "23/5/2020 23:30:41",
      "docker_image": "",
      "version": "1.0",
      "original_version_id": "0",
      "input_format": "strength;int;the covering strength;2\nparameter;int;the number of parameters;3\nvalues;int[];the number of choices of each parameter;[2,6,3]\nconstraints;string[];constraints of model;[[\"0/0\",\"1/0\"],[\"0/0\",\"1/1\"],[\"0/0\",\"1/2\"],[\"0/0\",\"1/3\"]]",
      "output_format": "testsuite;int[][];the generated covering array; [[0,0, 0]]\nsize;int;size of test suite;8\ntime;string;computational cost (ms);12",
      "docker_url": "",
      "checkflag": "1",
      "paper": "0"
    },
    {
      "id": "59",
      "title": "Jenny",
      "type": "Generation",
      "tags": "Generation,Greedy",
      "user_id": "12",
      "url": "http://210.28.135.32:8103",
      "healthcheck_url": "",
      "img": "http://210.28.135.32:80/serviceImg/5/6/9c76bcee-da4f-4afc-8e5d-097cd09df82bPICT.png",
      "repository": "https://github.com/lejinWang/real_jenny.git",
      "license": "MIT",
      "description": "Jenny is tool for generating regression tests.Any time exhaustive testing looks painful due to the combinatorial explosion of features interactions to be tested, consider using jenny .It will cover most of the interactions with far fewer testcases.It can guarantee pairwise testing of all features that can be used together, and it can avoid those feature combinations that cannot.",
      "short_desc": "A tool for generating regression tests.",
      "date": "24/6/2020 23:30:41",
      "docker_image": "",
      "version": "1.0",
      "original_version_id": "0",
      "input_format": "strength;int;the covering strength;2\nparameter;int;the number of parameters;3\nvalues;int[];the number of choices of each parameter;[2,6,3]\nconstraints;string[];constraints of model;[[\"0/0\",\"1/0\"],[\"0/0\",\"1/1\"],[\"0/0\",\"1/2\"],[\"0/0\",\"1/3\"]]",
      "output_format": "testsuite;int[][];the generated covering array; [[0,0, 0]]\nsize;int;size of test suite;8\ntime;string;computational cost (ms);12",
      "docker_url": "",
      "checkflag": "1",
      "paper": "0"
    },
    {
      "id": "60",
      "title": "ACTS_GUI",
      "type": "Generation",
      "tags": "Generation,ACTS",
      "user_id": "17",
      "url": "http://210.28.135.32:8200",
      "healthcheck_url": "",
      "img": "http://210.28.135.32:8200",
      "repository": "https://github.com/huayaow/cithub-generation.git ",
      "license": "MIT",
      "description": "ACTS is a well-known combinatorial test suite generation tool. This tools was initially developed by NIST, and has been used in many real-world projects and organisations.",
      "short_desc": "ACTS is a well-known combinatorial test suite generation tool. This tools was initially developed by NIST, and has been used in many real-world projects and organisations",
      "date": "23/3/2022 00:00:00",
      "docker_image": "waynedd/cithub-generation:2.3",
      "version": "1.0",
      "original_version_id": "0",
      "input_format": "GUI",
      "output_format": "GUI",
      "docker_url": "",
      "checkflag": "1",
      "paper": "0"
    },
    {
      "id": "61",
      "title": "PICT_GUI",
      "type": "Generation",
      "tags": "Generation,Greedy",
      "user_id": "17",
      "url": "http://210.28.135.32:8200",
      "healthcheck_url": "",
      "img": "http://210.28.135.32:8200",
      "repository": "https://github.com/huayaow/cithub-generation.git ",
      "license": "MIT",
      "description": "A test case generation tool that  has been in use at Microsoft since 2000, which implements the t-wise testing strategy and features making the strategy feasible in practice of software testing.",
      "short_desc": "PICT is a tool built on top of a flexible combinatorial test case generation engine, which was initally implemented by Microsoft.\n",
      "date": "23/3/2022 00:00:00",
      "docker_image": "waynedd/cithub-generation:2.3",
      "version": "1.0",
      "original_version_id": "0",
      "input_format": "GUI",
      "output_format": "GUI",
      "docker_url": "",
      "checkflag": "1",
      "paper": "0"
    },
    {
      "id": "62",
      "title": "Tcases_GUI",
      "type": "Generation",
      "tags": "Generation,IPO",
      "user_id": "17",
      "url": "http://210.28.135.32:8200",
      "healthcheck_url": "",
      "img": "http://210.28.135.32:8200",
      "repository": "https://github.com/huayaow/cithub-generation.git ",
      "license": "MIT",
      "description": "Tcases is a tool for designing tests. It doesn't matter what kind of system you are testing. Nor does it matter what level of the system you are testing — unit, subsystem, or full system. You can use Tcases to design your tests in any of these situations. With Tcases, you define the input space for your system-under-test and the level of coverage that you want. Then Tcases generates a minimal set of test cases that meets your requirements.",
      "short_desc": "Tcases is a tool for designing tests. It doesn't matter what kind of system you are testing. Nor does it matter what level of the system you are testing — unit, subsystem, or full system. You can use Tcases to design your tests in any of these situations.",
      "date": "23/3/2022 00:00:00",
      "docker_image": "waynedd/cithub-generation:2.3",
      "version": "1.0",
      "original_version_id": "0",
      "input_format": "GUI",
      "output_format": "GUI",
      "docker_url": "",
      "checkflag": "1",
      "paper": "0"
    },
    {
      "id": "63",
      "title": "Coffee4j_GUI",
      "type": "Generation",
      "tags": "Generation,IPO",
      "user_id": "17",
      "url": "http://210.28.135.32:8200",
      "healthcheck_url": "",
      "img": "http://210.28.135.32:8200",
      "repository": "https://github.com/huayaow/cithub-generation.git ",
      "license": "MIT",
      "description": "coffee4j is a Java-based framework for combinatorial test input generation and fault characterization. It is based on a fast implementation of the well-known IPOG algorithm and supports constraint handling, robustness testing and fault localization. A JUnit 5 extension seamlessly integrates combinatorial test input generation, fault characterization and automated test execution.",
      "short_desc": "coffee4j Core implements the core generation algorithm of a Java-based framework for combinatorial test input generation, fault characterization and automated test execution.\n",
      "date": "23/3/2022 00:00:00",
      "docker_image": "waynedd/cithub-generation:2.3",
      "version": "1.0",
      "original_version_id": "0",
      "input_format": "GUI",
      "output_format": "GUI",
      "docker_url": "",
      "checkflag": "1",
      "paper": "0"
    },
    {
      "id": "64",
      "title": "jcunit_GUI",
      "type": "Generation",
      "tags": "Generation,IPO",
      "user_id": "17",
      "url": "http://210.28.135.32:8200",
      "healthcheck_url": "",
      "img": "http://210.28.135.32:8200",
      "repository": "https://github.com/huayaow/cithub-generation.git ",
      "license": "MIT",
      "description": "A model based testing tool powered by combinatorial testing techniques.",
      "short_desc": "JCunit Core implements the core covering generation algorithm of JCUnit, which is a model based testing tool powered by combinatorial testing techniques.\n",
      "date": "23/3/2022 00:00:00",
      "docker_image": "waynedd/cithub-generation:2.3",
      "version": "1.0",
      "original_version_id": "0",
      "input_format": "GUI",
      "output_format": "GUI",
      "docker_url": "",
      "checkflag": "1",
      "paper": "0"
    },
    {
      "id": "65",
      "title": "jenny_GUI",
      "type": "Generation",
      "tags": "Generation,Greedy",
      "user_id": "17",
      "url": "http://210.28.135.32:8200",
      "healthcheck_url": "",
      "img": "http://210.28.135.32:8200",
      "repository": "https://github.com/huayaow/cithub-generation.git ",
      "license": "MIT",
      "description": "Jenny is tool for generating regression tests.Any time exhaustive testing looks painful due to the combinatorial explosion of features interactions to be tested, consider using jenny .It will cover most of the interactions with far fewer testcases.It can guarantee pairwise testing of all features that can be used together, and it can avoid those feature combinations that cannot.",
      "short_desc": "A tool for generating regression tests.",
      "date": "23/3/2022 00:00:00",
      "docker_image": "waynedd/cithub-generation:2.3",
      "version": "1.0",
      "original_version_id": "0",
      "input_format": "GUI",
      "output_format": "GUI",
      "docker_url": "",
      "checkflag": "1",
      "paper": "0"
    },
    {
      "id": "66",
      "title": "CASA_GUI",
      "type": "Generation",
      "tags": "Generation,CASA",
      "user_id": "17",
      "url": "http://210.28.135.32:8200",
      "healthcheck_url": "",
      "img": "http://210.28.135.32:8200",
      "repository": "https://github.com/huayaow/cithub-generation.git ",
      "license": "MIT",
      "description": "This is the main page for CASA, the tool in An Improved Meta-Heuristic Search for Constrained Interaction Testing, which appeared in SSBSE 2009, and Evaluating Improvements to a Meta-Heuristic Search for Constrained Interaction Testing, which appeared in EMSE. When citing this material, please reference the appropriate paper rather than this page.",
      "short_desc": "CASA is a well-known combinatorial test suite generation tool empowered by heuristic search based techniques. The initial version of this tool appeared in SSBSE 2009 and EMSE 2010 (Evaluating Improvements to a Meta-Heuristic Search for Constrained Interaction Testing).\n",
      "date": "23/3/2022 00:00:00",
      "docker_image": "waynedd/cithub-generation:2.3",
      "version": "1.0",
      "original_version_id": "0",
      "input_format": "GUI",
      "output_format": "GUI",
      "docker_url": "",
      "checkflag": "1",
      "paper": "0"
    },
    {
      "id": "67",
      "title": "FastCA_GUI",
      "type": "Generation",
      "tags": "Generation,FastCA",
      "user_id": "17",
      "url": "http://210.28.135.32:8200",
      "healthcheck_url": "",
      "img": "http://210.28.135.32:8200",
      "repository": "https://github.com/huayaow/cithub-generation.git ",
      "license": "MIT",
      "description": "A gradient descent search step to further improve the algorithm, leading to a new algorithm.",
      "short_desc": "FastCA realises two-mode covering array generation algorithm (Tabu search + greedy), and employs a gradient descent search step to further improve the performance.\n",
      "date": "23/3/2022 00:00:00",
      "docker_image": "waynedd/cithub-generation:2.3",
      "version": "1.0",
      "original_version_id": "0",
      "input_format": "GUI",
      "output_format": "GUI",
      "docker_url": "",
      "checkflag": "1",
      "paper": "0"
    },
    {
      "id": "68",
      "title": "medici_GUI",
      "type": "Generation",
      "tags": "Generation,Greedy",
      "user_id": "17",
      "url": "http://210.28.135.32:8200",
      "healthcheck_url": "",
      "img": "http://210.28.135.32:8200",
      "repository": "https://github.com/huayaow/cithub-generation.git ",
      "license": "MIT",
      "description": "medici is a tool for combinatorial test generation based on the use of Multiple-Valued Decision Diagrams",
      "short_desc": "medici is a tool for combinatorial test generation based on the use of Multiple-Valued Decision Diagrams.\n",
      "date": "23/3/2022 00:00:00",
      "docker_image": "waynedd/cithub-generation:2.3",
      "version": "1.0",
      "original_version_id": "0",
      "input_format": "GUI",
      "output_format": "GUI",
      "docker_url": "",
      "checkflag": "1",
      "paper": "0"
    }
  ]
}